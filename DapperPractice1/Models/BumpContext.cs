// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DapperPractice1.Models;

public partial class BumpContext : DbContext
{
    public BumpContext()
    {
    }

    public BumpContext(DbContextOptions<BumpContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivityCoupon> ActivityCoupons { get; set; }

    public virtual DbSet<ActivityDetail> ActivityDetails { get; set; }

    public virtual DbSet<ActivityDiscount> ActivityDiscounts { get; set; }

    public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }

    public virtual DbSet<BanDate> BanDates { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartDetail> CartDetails { get; set; }

    public virtual DbSet<CartHistory> CartHistories { get; set; }

    public virtual DbSet<Coach> Coaches { get; set; }

    public virtual DbSet<ContactU> ContactUs { get; set; }

    public virtual DbSet<Conversation> Conversations { get; set; }

    public virtual DbSet<Counter> Counters { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<CouponSendＭember> CouponSendＭembers { get; set; }

    public virtual DbSet<CouponType> CouponTypes { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DiscountType> DiscountTypes { get; set; }

    public virtual DbSet<Dm> Dms { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EventType> EventTypes { get; set; }

    public virtual DbSet<ExperienceCoursePlan> ExperienceCoursePlans { get; set; }

    public virtual DbSet<ExperienceEnrollment> ExperienceEnrollments { get; set; }

    public virtual DbSet<Field> Fields { get; set; }

    public virtual DbSet<FirstCategory> FirstCategories { get; set; }

    public virtual DbSet<Freeby> Freebies { get; set; }

    public virtual DbSet<Hash> Hashes { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobParameter> JobParameters { get; set; }

    public virtual DbSet<JobQueue> JobQueues { get; set; }

    public virtual DbSet<List> Lists { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberLevel> MemberLevels { get; set; }

    public virtual DbSet<MemberLevelDetail> MemberLevelDetails { get; set; }

    public virtual DbSet<MemberLevelDetailsHistory> MemberLevelDetailsHistories { get; set; }

    public virtual DbSet<MemberPoint> MemberPoints { get; set; }

    public virtual DbSet<MemberTag> MemberTags { get; set; }

    public virtual DbSet<MemberTagCondition> MemberTagConditions { get; set; }

    public virtual DbSet<MembersHistory> MembersHistories { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderReturnDetail> OrderReturnDetails { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<OrderUsedCoupon> OrderUsedCoupons { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PointStatus> PointStatuses { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductComment> ProductComments { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<ProductStyle> ProductStyles { get; set; }

    public virtual DbSet<ProductTag> ProductTags { get; set; }

    public virtual DbSet<ProductTagCategory> ProductTagCategories { get; set; }

    public virtual DbSet<PromotionProductType> PromotionProductTypes { get; set; }

    public virtual DbSet<Schema> Schemas { get; set; }

    public virtual DbSet<SecondCategory> SecondCategories { get; set; }

    public virtual DbSet<Server> Servers { get; set; }

    public virtual DbSet<Set> Sets { get; set; }

    public virtual DbSet<SkillCourse> SkillCourses { get; set; }

    public virtual DbSet<SkillEnrollment> SkillEnrollments { get; set; }

    public virtual DbSet<Skillcurriculum> Skillcurriculums { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<TargetType> TargetTypes { get; set; }

    public virtual DbSet<ThirdCategory> ThirdCategories { get; set; }

    public virtual DbSet<TrendingQuestion> TrendingQuestions { get; set; }

    public virtual DbSet<TrendingQuestionType> TrendingQuestionTypes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Bump;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Activity>(entity =>
        {
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Thumbnail)
                .HasMaxLength(300)
                .IsFixedLength();
        });

        modelBuilder.Entity<ActivityCoupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ActitivitiesDiscount");

            entity.HasOne(d => d.ActivityDetail).WithMany(p => p.ActivityCoupons)
                .HasForeignKey(d => d.ActivityDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActitivityCoupons_ActivityDetails");

            entity.HasOne(d => d.Coupon).WithMany(p => p.ActivityCoupons)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActitivityCoupons_Coupons");
        });

        modelBuilder.Entity<ActivityDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ActivityDetail");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Thumbnail).HasMaxLength(2550);

            entity.HasOne(d => d.Activity).WithMany(p => p.ActivityDetails)
                .HasForeignKey(d => d.ActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActivitiesDetail_Activities");
        });

        modelBuilder.Entity<ActivityDiscount>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AcitivityDetail).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.AcitivityDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActivityDiscounts_ActivityDetails");

            entity.HasOne(d => d.DiscountType).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.DiscountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActivityDiscounts_DiscountTypes");

            entity.HasOne(d => d.Freebie).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.FreebieId)
                .HasConstraintName("FK_ActivityDiscounts_Freebies");

            entity.HasOne(d => d.GiftCoupon).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.GiftCouponId)
                .HasConstraintName("FK_ActivityDiscounts_Coupons");

            entity.HasOne(d => d.PromotionProductType).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.PromotionProductTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActivityDiscounts_PromotionProductTypes");

            entity.HasOne(d => d.TargetType).WithMany(p => p.ActivityDiscounts)
                .HasForeignKey(d => d.TargetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActivityDiscounts_TargetTypes");
        });

        modelBuilder.Entity<AggregatedCounter>(entity =>
        {
            entity.HasKey(e => e.Key).HasName("PK_HangFire_CounterAggregated");

            entity.ToTable("AggregatedCounter", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_AggregatedCounter_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<BanDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BanDate");

            entity.Property(e => e.BanEndDateTime).HasColumnType("datetime");
            entity.Property(e => e.BanStartDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Field).WithMany(p => p.BanDates)
                .HasForeignKey(d => d.FieldId)
                .HasConstraintName("FK_BanDate_Field");
        });

        modelBuilder.Entity<Brand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Brand");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Thumbnail)
                .IsRequired()
                .HasMaxLength(2048);
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasOne(d => d.Member).WithMany(p => p.Carts)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Carts_Member");
        });

        modelBuilder.Entity<CartDetail>(entity =>
        {
            entity.HasOne(d => d.Carts).WithMany(p => p.CartDetails)
                .HasForeignKey(d => d.CartsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartDetails_Carts");

            entity.HasOne(d => d.ProductStyles).WithMany(p => p.CartDetails)
                .HasForeignKey(d => d.ProductStylesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartDetails_Product");
        });

        modelBuilder.Entity<CartHistory>(entity =>
        {
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");

            entity.HasOne(d => d.CartDetails).WithMany(p => p.CartHistories)
                .HasForeignKey(d => d.CartDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartHistories_CartDetails");
        });

        modelBuilder.Entity<Coach>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Coach");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.Img)
                .IsRequired()
                .HasMaxLength(2550);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<ContactU>(entity =>
        {
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(320)
                .IsUnicode(false);
            entity.Property(e => e.Inquiry)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.ToTable("Conversation");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.SendTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.Conversations)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Conversation_Members");
        });

        modelBuilder.Entity<Counter>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Id }).HasName("PK_HangFire_Counter");

            entity.ToTable("Counter", "HangFire");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LastModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.PrevTime).HasColumnType("datetime");
            entity.Property(e => e.RepeatRule).HasMaxLength(20);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CouponType).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.CouponTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_CouponTypes");

            entity.HasOne(d => d.EventType).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.EventTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_EventTypes");

            entity.HasOne(d => d.Freebie).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.FreebieId)
                .HasConstraintName("FK_Coupons_Freebies");

            entity.HasOne(d => d.PromotionProductType).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.PromotionProductTypeId)
                .HasConstraintName("FK_Coupons_PromotionProductTypes");

            entity.HasOne(d => d.TargetType).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.TargetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_TargetTypes");
        });

        modelBuilder.Entity<CouponSendＭember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DiscountSendRecords");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.SendingTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponSendＭembers)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponSendＭembers_Coupons");

            entity.HasOne(d => d.Member).WithMany(p => p.CouponSendＭembers)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CouponSendＭembers_Members");
        });

        modelBuilder.Entity<CouponType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DiscountType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Dealer");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(320);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(320);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DiscountType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Dm>(entity =>
        {
            entity.ToTable("DMs");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Dmfile)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DMFile");
            entity.Property(e => e.MailContent).IsRequired();
            entity.Property(e => e.SendingTime).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3214EC07F74DD519");

            entity.HasIndex(e => e.Account, "IX_Employees").IsUnique();

            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Img).HasMaxLength(2550);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EventType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ExperienceCoursePlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ExperienceCoursePlan");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ExperienceEnrollment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ExperienceEnrollment");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Coach).WithMany(p => p.ExperienceEnrollments)
                .HasForeignKey(d => d.CoachId)
                .HasConstraintName("FK_ExperienceEnrollments_Coaches");

            entity.HasOne(d => d.ExperienceCoursePlan).WithMany(p => p.ExperienceEnrollments)
                .HasForeignKey(d => d.ExperienceCoursePlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExperienceEnrollment_ExperienceCoursePlan");

            entity.HasOne(d => d.Field).WithMany(p => p.ExperienceEnrollments)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExperienceEnrollments_Fields");

            entity.HasOne(d => d.Member).WithMany(p => p.ExperienceEnrollments)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExperienceEnrollment_Member");
        });

        modelBuilder.Entity<Field>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Field");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.BusinessHours).HasMaxLength(200);
            entity.Property(e => e.BusinessWeekdayEndTime).HasColumnType("datetime");
            entity.Property(e => e.BusinessWeekdayStartTime).HasColumnType("datetime");
            entity.Property(e => e.BusinessWeekendEndTime).HasColumnType("datetime");
            entity.Property(e => e.BusinessWeekendStartTime).HasColumnType("datetime");
            entity.Property(e => e.Link).HasMaxLength(2048);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShortDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Thumbnail)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<FirstCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Category");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<Freeby>(entity =>
        {
            entity.Property(e => e.Brand)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.ShortDescription)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Thumbnail)
                .IsRequired()
                .HasMaxLength(2048)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Hash>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Field }).HasName("PK_HangFire_Hash");

            entity.ToTable("Hash", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Hash_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Field).HasMaxLength(100);
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HangFire_Job");

            entity.ToTable("Job", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Job_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.HasIndex(e => e.StateName, "IX_HangFire_Job_StateName").HasFilter("([StateName] IS NOT NULL)");

            entity.Property(e => e.Arguments).IsRequired();
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            entity.Property(e => e.InvocationData).IsRequired();
            entity.Property(e => e.StateName).HasMaxLength(20);
        });

        modelBuilder.Entity<JobParameter>(entity =>
        {
            entity.HasKey(e => new { e.JobId, e.Name }).HasName("PK_HangFire_JobParameter");

            entity.ToTable("JobParameter", "HangFire");

            entity.Property(e => e.Name).HasMaxLength(40);

            entity.HasOne(d => d.Job).WithMany(p => p.JobParameters)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_HangFire_JobParameter_Job");
        });

        modelBuilder.Entity<JobQueue>(entity =>
        {
            entity.HasKey(e => new { e.Queue, e.Id }).HasName("PK_HangFire_JobQueue");

            entity.ToTable("JobQueue", "HangFire");

            entity.Property(e => e.Queue).HasMaxLength(50);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.FetchedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<List>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Id }).HasName("PK_HangFire_List");

            entity.ToTable("List", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_List_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Member");

            entity.HasIndex(e => e.Account, "IX_Account").IsUnique();

            entity.HasIndex(e => e.Email, "IX_Email").IsUnique();

            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Birthday).HasColumnType("datetime");
            entity.Property(e => e.ConfirmCode).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Dmsubscribe).HasColumnName("DMSubscribe");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(320)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastModified)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MemberLevelId).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Nickname).HasMaxLength(100);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.MemberLevel).WithMany(p => p.Members)
                .HasForeignKey(d => d.MemberLevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Members_MemberLevels");

            entity.HasMany(d => d.MemberTags).WithMany(p => p.Members)
                .UsingEntity<Dictionary<string, object>>(
                    "MembersOfMemberTag",
                    r => r.HasOne<MemberTag>().WithMany()
                        .HasForeignKey("MemberTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberOfMemberTags_MemberTags"),
                    l => l.HasOne<Member>().WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberOfMemberTags_Member"),
                    j =>
                    {
                        j.HasKey("MemberId", "MemberTagId");
                        j.ToTable("MembersOfMemberTags");
                    });
        });

        modelBuilder.Entity<MemberLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MemberLevel");

            entity.HasIndex(e => e.LevelOrder, "IX_MemberLevels").IsUnique();

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.GainPointRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LevelName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasMany(d => d.ActivityDiscounts).WithMany(p => p.MemberLevels)
                .UsingEntity<Dictionary<string, object>>(
                    "MemberLevelOfActivityDiscount",
                    r => r.HasOne<ActivityDiscount>().WithMany()
                        .HasForeignKey("ActivityDiscountId")
                        .HasConstraintName("FK_MemberLevelOfActivityDiscounts_ActivityDiscounts"),
                    l => l.HasOne<MemberLevel>().WithMany()
                        .HasForeignKey("MemberLevelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberLevelOfActivityDiscounts_MemberLevels"),
                    j =>
                    {
                        j.HasKey("MemberLevelId", "ActivityDiscountId");
                        j.ToTable("MemberLevelOfActivityDiscounts");
                    });

            entity.HasMany(d => d.Coupons).WithMany(p => p.MemberLevels)
                .UsingEntity<Dictionary<string, object>>(
                    "MemberLevelOfCoupon",
                    r => r.HasOne<Coupon>().WithMany()
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_MemberLevelOfCoupons_Coupons"),
                    l => l.HasOne<MemberLevel>().WithMany()
                        .HasForeignKey("MemberLevelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberLevelOfCoupons_MemberLevels"),
                    j =>
                    {
                        j.HasKey("MemberLevelId", "CouponId");
                        j.ToTable("MemberLevelOfCoupons");
                    });
        });

        modelBuilder.Entity<MemberLevelDetail>(entity =>
        {
            entity.HasIndex(e => e.MemberId, "IX_MemberLevelDetails").IsUnique();

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithOne(p => p.MemberLevelDetail)
                .HasForeignKey<MemberLevelDetail>(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberLevelDetails_Members1");

            entity.HasOne(d => d.MemberLevel).WithMany(p => p.MemberLevelDetails)
                .HasForeignKey(d => d.MemberLevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberLevelDetails_MemberLevels");
        });

        modelBuilder.Entity<MemberLevelDetailsHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MemberLevelDetails_History");

            entity.ToTable("MemberLevelDetails_Histories");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.MemberLevel).WithMany(p => p.MemberLevelDetailsHistories)
                .HasForeignKey(d => d.MemberLevelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberLevelDetails_Histories_MemberLevels");
        });

        modelBuilder.Entity<MemberPoint>(entity =>
        {
            entity.HasOne(d => d.Member).WithMany(p => p.MemberPoints)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberPoints_Members");

            entity.HasOne(d => d.Order).WithMany(p => p.MemberPoints)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberPoints_Orders");

            entity.HasOne(d => d.PointStatus).WithMany(p => p.MemberPoints)
                .HasForeignKey(d => d.PointStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberPoints_PointStatuses");
        });

        modelBuilder.Entity<MemberTag>(entity =>
        {
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasMany(d => d.ActivityDiscounts).WithMany(p => p.MemberTags)
                .UsingEntity<Dictionary<string, object>>(
                    "MemberTagOfActivityDiscount",
                    r => r.HasOne<ActivityDiscount>().WithMany()
                        .HasForeignKey("ActivityDiscountId")
                        .HasConstraintName("FK_MemberTagOfActivityDiscounts_ActivityDiscounts"),
                    l => l.HasOne<MemberTag>().WithMany()
                        .HasForeignKey("MemberTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberTagOfActivityDiscounts_MemberTags"),
                    j =>
                    {
                        j.HasKey("MemberTagId", "ActivityDiscountId");
                        j.ToTable("MemberTagOfActivityDiscounts");
                    });

            entity.HasMany(d => d.Coupons).WithMany(p => p.MemberTags)
                .UsingEntity<Dictionary<string, object>>(
                    "MemberTagOfCoupon",
                    r => r.HasOne<Coupon>().WithMany()
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_MemberTagOfCoupons_Coupons"),
                    l => l.HasOne<MemberTag>().WithMany()
                        .HasForeignKey("MemberTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MemberTagOfCoupons_MemberTags"),
                    j =>
                    {
                        j.HasKey("MemberTagId", "CouponId");
                        j.ToTable("MemberTagOfCoupons");
                    });
        });

        modelBuilder.Entity<MemberTagCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MemberTa__3214EC07ACA78FFF");

            entity.ToTable("MemberTagCondition");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Operator)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Value).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.MemberTag).WithMany(p => p.MemberTagConditions)
                .HasForeignKey(d => d.MemberTagId)
                .HasConstraintName("FK_MemberTagCondition_MemberTags");
        });

        modelBuilder.Entity<MembersHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MemberHistory");

            entity.ToTable("Members_Histories");

            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Birthday).HasColumnType("datetime");
            entity.Property(e => e.Dmsubscribe).HasColumnName("DMSubscribe");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(320)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.Member).WithMany(p => p.MembersHistories)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Members_Histories_Members");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Order");

            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(300);
            entity.Property(e => e.RecipientAddress)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.RecipientEmail)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RecipientName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.RecipientPhone)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Snapshot)
                .HasMaxLength(2550)
                .IsUnicode(false);

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Member");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_OrderStatuses1");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderDetail");

            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Products");

            entity.HasOne(d => d.ProductStyle).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductStyleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_ProductStyles");
        });

        modelBuilder.Entity<OrderReturnDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderReturnDetail");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderReturnDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderReturnDetails_Orders");
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_OrderStatus");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<OrderUsedCoupon>(entity =>
        {
            entity.HasOne(d => d.Coupon).WithMany(p => p.OrderUsedCoupons)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderUsedCoupons_Coupons");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderUsedCoupons)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderUsedCoupons_Orders");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Payment");

            entity.Property(e => e.EcpayMerchantTradeNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ECPayMerchantTradeNo");
            entity.Property(e => e.LineOrderId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LineTransactionId)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PayType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(12);

            entity.HasOne(d => d.BumpOrder).WithMany(p => p.Payments)
                .HasForeignKey(d => d.BumpOrderId)
                .HasConstraintName("FK_Payments_Orders");

            entity.HasOne(d => d.BumpSkillCourseEnrollment).WithMany(p => p.Payments)
                .HasForeignKey(d => d.BumpSkillCourseEnrollmentId)
                .HasConstraintName("FK_Payments_SkillEnrollments");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Product");

            entity.HasIndex(e => e.Code, "IX_Product").IsUnique();

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.ShelfStatus)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ShortDescription).HasMaxLength(1000);
            entity.Property(e => e.Thumbnail)
                .IsRequired()
                .HasMaxLength(2048)
                .IsUnicode(false);
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Brand).WithMany(p => p.Products)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Brand");

            entity.HasOne(d => d.ThirdCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.ThirdCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_ThirdCategory");

            entity.HasMany(d => d.Dealers).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductsOfDealer",
                    r => r.HasOne<Dealer>().WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductsOfDealers_Dealer"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductsOfDealers_Product"),
                    j =>
                    {
                        j.HasKey("ProductId", "DealerId");
                        j.ToTable("ProductsOfDealers");
                    });

            entity.HasMany(d => d.ProductTags).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "TagOfProduct",
                    r => r.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TagOfProduct_ProductTag"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TagOfProducts_Products"),
                    j =>
                    {
                        j.HasKey("ProductId", "ProductTagId");
                        j.ToTable("TagOfProducts");
                    });
        });

        modelBuilder.Entity<ProductComment>(entity =>
        {
            entity.Property(e => e.CreateAt).HasColumnType("date");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.Order).WithMany(p => p.ProductComments)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductComments_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductComments)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductComments_Product");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(2048)
                .IsUnicode(false);

            entity.HasOne(d => d.Product).WithMany()
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductImages_Products");
        });

        modelBuilder.Entity<ProductStyle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Table_1");

            entity.Property(e => e.Style)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductStyles)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductStyles_Products");
        });

        modelBuilder.Entity<ProductTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ProductTag");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.ProductTagCategory).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.ProductTagCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductTags_ProductTagCategory");

            entity.HasMany(d => d.ActivityDiscounts).WithMany(p => p.ProductTags)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagOfActivityDiscount",
                    r => r.HasOne<ActivityDiscount>().WithMany()
                        .HasForeignKey("ActivityDiscountId")
                        .HasConstraintName("FK_ProductTagOfActitivityDiscounts_ActivityDiscounts"),
                    l => l.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductTagOfActitivityDiscounts_ProductTags"),
                    j =>
                    {
                        j.HasKey("ProductTagId", "ActivityDiscountId");
                        j.ToTable("ProductTagOfActivityDiscounts");
                    });

            entity.HasMany(d => d.Coupons).WithMany(p => p.ProductTags)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagOfCoupon",
                    r => r.HasOne<Coupon>().WithMany()
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_ProductTagOfCoupons_Coupons"),
                    l => l.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductTagOfDiscount_ProductTag"),
                    j =>
                    {
                        j.HasKey("ProductTagId", "CouponId");
                        j.ToTable("ProductTagOfCoupons");
                    });
        });

        modelBuilder.Entity<ProductTagCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ProductTagCategory");

            entity.HasIndex(e => e.Name, "IX_ProductTagCategory").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PromotionProductType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Schema>(entity =>
        {
            entity.HasKey(e => e.Version).HasName("PK_HangFire_Schema");

            entity.ToTable("Schema", "HangFire");

            entity.Property(e => e.Version).ValueGeneratedNever();
        });

        modelBuilder.Entity<SecondCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SecondCategory");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.FirstCategory).WithMany(p => p.SecondCategories)
                .HasForeignKey(d => d.FirstCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SecondCategory_FirstCategory");
        });

        modelBuilder.Entity<Server>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HangFire_Server");

            entity.ToTable("Server", "HangFire");

            entity.HasIndex(e => e.LastHeartbeat, "IX_HangFire_Server_LastHeartbeat");

            entity.Property(e => e.Id).HasMaxLength(200);
            entity.Property(e => e.LastHeartbeat).HasColumnType("datetime");
        });

        modelBuilder.Entity<Set>(entity =>
        {
            entity.HasKey(e => new { e.Key, e.Value }).HasName("PK_HangFire_Set");

            entity.ToTable("Set", "HangFire");

            entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Set_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

            entity.HasIndex(e => new { e.Key, e.Score }, "IX_HangFire_Set_Score");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(256);
            entity.Property(e => e.ExpireAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<SkillCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Course");

            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Thumbnail)
                .IsRequired()
                .HasMaxLength(2550);
        });

        modelBuilder.Entity<SkillEnrollment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SkillEnrollment");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.SkillEnrollments)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SkillEnrollment_Member");

            entity.HasOne(d => d.Skillcurriculums).WithMany(p => p.SkillEnrollments)
                .HasForeignKey(d => d.SkillcurriculumsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SkillEnrollments_Skillcurriculums");
        });

        modelBuilder.Entity<Skillcurriculum>(entity =>
        {
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("date");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Coach).WithMany(p => p.Skillcurricula)
                .HasForeignKey(d => d.CoachId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Skillcurriculums_Coaches");

            entity.HasOne(d => d.Field).WithMany(p => p.Skillcurricula)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Skillcurriculums_Fields");

            entity.HasOne(d => d.SkillCourses).WithMany(p => p.Skillcurricula)
                .HasForeignKey(d => d.SkillCoursesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Skillcurriculums_SkillCourses");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => new { e.JobId, e.Id }).HasName("PK_HangFire_State");

            entity.ToTable("State", "HangFire");

            entity.HasIndex(e => e.CreatedAt, "IX_HangFire_State_CreatedAt");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Reason).HasMaxLength(100);

            entity.HasOne(d => d.Job).WithMany(p => p.States)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_HangFire_State_Job");
        });

        modelBuilder.Entity<TargetType>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ThirdCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ThirdCategory");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.SecondCategory).WithMany(p => p.ThirdCategories)
                .HasForeignKey(d => d.SecondCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ThirdCategory_SecondCategory");

            entity.HasMany(d => d.ActivityDiscounts).WithMany(p => p.ThirdCategories)
                .UsingEntity<Dictionary<string, object>>(
                    "ThirdCategoryOfActivityDiscount",
                    r => r.HasOne<ActivityDiscount>().WithMany()
                        .HasForeignKey("ActivityDiscountId")
                        .HasConstraintName("FK_ThirdCategoryOfActivityDiscounts_ActivityDiscounts"),
                    l => l.HasOne<ThirdCategory>().WithMany()
                        .HasForeignKey("ThirdCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ThirdCategoryOfActivityDiscounts_ThirdCategories"),
                    j =>
                    {
                        j.HasKey("ThirdCategoryId", "ActivityDiscountId");
                        j.ToTable("ThirdCategoryOfActivityDiscounts");
                    });

            entity.HasMany(d => d.Coupons).WithMany(p => p.ThirdCategories)
                .UsingEntity<Dictionary<string, object>>(
                    "ThirdCategoryOfCoupon",
                    r => r.HasOne<Coupon>().WithMany()
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_ThirdCategoryOfCoupons_Coupons"),
                    l => l.HasOne<ThirdCategory>().WithMany()
                        .HasForeignKey("ThirdCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ThirdCategoryOfCoupons_ThirdCategories"),
                    j =>
                    {
                        j.HasKey("ThirdCategoryId", "CouponId");
                        j.ToTable("ThirdCategoryOfCoupons");
                    });
        });

        modelBuilder.Entity<TrendingQuestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TrendingQuestion");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.QuestionType).WithMany(p => p.TrendingQuestions)
                .HasForeignKey(d => d.QuestionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrendingQuestion_TrandingQuestionType");
        });

        modelBuilder.Entity<TrendingQuestionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TrendingQuestionType");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}